#unsure how to get intended result here
averages <- pmap(unnamed_list, function(x,y,z) {(x+y+z)/3})
first_average <- as.vector(unlist(averages[1]))
View(averages)
extract_fun <- pmap(can_data, c, use.names = T)
View(extract_fun)
?pmap
View(extract_fun)
extract_fun <- pmap(can_data, c, use.names = F)
View(extract_fun)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
View(extract_fun)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library(knitr)
library(pander)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(DT)
library(stringr)
library(ggplot2)
options(stringsAsFactors = FALSE)
factorial <- function(n) {
final_product <- 1
for (i in 1:n) {
final_product <- final_product * i
}
return(final_product)
}
combination <- function(n, k) {
return(factorial(n)/(factorial(n - k) * factorial(k)))
}
one_ticket_probability <- function(x) {
c_lotto <- combination(49, 6)
probability <- 1/c_lotto
sprintf("%.10f",probability)
}
vec <- c(13,22,24,27,42,44)
one_ticket_probability(vector)
can_data <- data.frame(read_csv("649.csv"))
nrow(can_data)
ncol(can_data)
head(can_data, 3)
tail(can_data, 3)
data1 <- c(1, 3, 5)
data2 <- c(2, 4, 6)
data3 <- c(8, 9, 7)
unnamed_list <- list(data1, data2, data3)
named_list <- list(first=data1, second=data2, third=data3)
first_item_sum <- sum(named_list$first[1], named_list$second[1], named_list$third[1])
averages <- pmap(unnamed_list, function(x,y,z) {(x+y+z)/3})
first_average <- as.vector(unlist(averages[1]))
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
check_historical_occurence <- function(vec,lis) {
setequal(vec,lis)
}
one_ticket_probability <- function(x) {
c_lotto <- combination(49, 6)
probability <- 1/c_lotto
sprintf("%.10f",probability)
}
vec <- c(13,22,24,27,42,44)
one_ticket_probability(vec)
setequal(vec, extract_fun)
View(can_data_subset)
setequal(c(3, 11, 12, 41, 43), extract_fun)
setequal(c(3, 11, 12, 41, 43), extract_fun[1])
View(extract_fun)
type(vec)
typeof(vec)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun <- unlist(extract_fun)
check_historical_occurence <- function(vec,lis) {
setequal(vec,lis)
if (vec == lis) {
print(TRUE)
else
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
check_historical_occurence <- function(vec,lis) {
setequal(vec,lis)
if (vec == lis) {
print(TRUE)
else
View(named_list)
View(unnamed_list)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = T)
View(extract_fun)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun <- as.character(extract_fun)
View(can_data_subset)
vec1 <- c("3", "11", "12", "14", "41", "43")
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun <- pmap(extract_fun, function(x), as.character)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun <- pmap(extract_fun, function(x) as.character)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun <- toString(extract_fun)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun1 <- toString(extract_fun)
View(extract_fun)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun1 <- pmap(extract_fun, toString)
View(extract_fun1)
View(extract_fun1)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun1 <- pmap(can_data_subset, toString)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun1 <- pmap(can_data_subset, toString)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun1 <- paste(unlist(extract_fun), collapse='')
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun1 <- pmap(extract_fun, toString)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun1 <- unlist(extract_fun)
View(unnamed_list)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun1 <- unlist(extract_fun)
as.character(extract_fun1)
setequal(vec1, extract_fun1)
as.character(vec1)
setequal(vec1, extract_fun1)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun1 <- pmap(extract_fun, as.character)
View(extract_fun1)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c, use.names = F)
extract_fun1 <- pmap(extract_fun, toString)
View(can_data_subset)
extract_fun <- list(can_data_subset)
View(extract_fun)
extract_fun <- as.vector(can_data_subset)
View(extract_fun)
extract_fun1 <- pmaP(extract_fun, as.character)
extract_fun1 <- pmap(extract_fun, as.character)
?seq
extract_fun <- split(can_data_subset, seq(nrow(can_data_subset)))
View(extract_fun)
group_split
?group_split
class(can_data_subset) <- "list"
View(can_data_subset)
?paste0
?split
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- split(can_data_subset, row(can_data_subset))
View(extract_fun)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c)
View(extract_fun)
can_data_subset <- as.character(can_data) %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
can_data_subset <- as.character(can_data)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c)
View(extract_fun)
View(can_data_subset)
can_data_subset <- toString(can_data)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
extract_fun <- pmap(can_data_subset, c)
View(extract_fun)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
can_data_subset <- can_data_subset %>%
mutate_all(can_data_subset, as.character)
can_data_subset <- can_data %>%
select(NUMBER.DRAWN.1, NUMBER.DRAWN.2, NUMBER.DRAWN.3, NUMBER.DRAWN.4, NUMBER.DRAWN.5, NUMBER.DRAWN.6)
can_data_subset <- can_data_subset %>%
mutate_if(is.double, as.character)
extract_fun <- pmap(can_data_subset, c)
View(extract_fun)
setequal(vec1, extract_fun)
View(extract_fun)
vec1 <- as.character(vec)
vec <- c(3, 11, 12, 14, 41, 43)
vec1 <- as.character(vec)
setequal(vec1, extract_fun)
one_ticket_probability <- function(x) {
c_lotto <- combination(49, 6)
probability <- 1/c_lotto
actual_prob <- sprintf("%.1.9f",probability)
statement <- paste("You have a", actual_prob, "% chance of winning hte big prize.", sep = "" )
return(statement)
}
vec <- c(13,22,24,27,42,44)
one_ticket_probability(vec)
one_ticket_probability <- function(x) {
c_lotto <- combination(49, 6)
probability <- 1/c_lotto
actual_prob <- sprintf("%.1.9f",probability)
statement <- paste("You have a ", actual_prob, "% chance of winning hte big prize.", sep = "" )
return(statement)
}
vec <- c(13,22,24,27,42,44)
one_ticket_probability(vec)
one_ticket_probability <- function(x) {
c_lotto <- combination(49, 6)
probability <- 1/c_lotto
actual_prob <- sprintf("%10f",probability)
statement <- paste("You have a ", actual_prob, "% chance of winning the big prize.", sep = "" )
return(statement)
}
vec <- c(13,22,24,27,42,44)
one_ticket_probability(vec)
one_ticket_probability <- function(x) {
c_lotto <- combination(49, 6)
probability <- 1/c_lotto
actual_prob <- sprintf("%2.0f",probability)
statement <- paste("You have a ", actual_prob, "% chance of winning the big prize.", sep = "" )
return(statement)
}
vec <- c(13,22,24,27,42,44)
one_ticket_probability(vec)
one_ticket_probability <- function(x) {
c_lotto <- combination(49, 6)
probability <- 1/c_lotto
actual_prob <- sprintf("%1.9f",probability)
statement <- paste("You have a", actual_prob, "% chance of winning the big prize.", sep = "" )
return(statement)
}
vec <- c(13,22,24,27,42,44)
one_ticket_probability(vec)
one_ticket_probability <- function(x) {
c_lotto <- combination(49, 6)
probability <- 1/c_lotto
actual_prob <- sprintf("%1.9f",probability)
statement <- paste("You have a ", actual_prob, "% chance of winning the big prize.", sep = "" )
return(statement)
}
vec <- c(13,22,24,27,42,44)
one_ticket_probability(vec)
one_ticket_probability <- function(x) {
c_lotto <- combination(49, 6)
probability <- 1/c_lotto
actual_prob <- sprintf("%1.9f",probability)
statement <- paste("You have a ", actual_prob, "% chance of winning the big prize.", sep = "" )
return(statement)
}
vec <- c(13,22,24,27,42,44)
one_ticket_probability(vec)
View(can_data)
historical_lots <- pmap(
list(
one <- can_data$NUMBER.DRAWN.1,
two <- can_data$NUMBER.DRAWN.2,
three <- can_data$NUMBER.DRAWN.3,
four <- can_data$NUMBER.DRAWN.4,
five <- can_data$NUMBER.DRAWN.5,
six <- can_data$NUMBER.DRAWN.6,
),
.f <- function(one,two,three,four,five,six) { c(one,two,three,four,five,six)}
)
historical_lots <- pmap(
list(
one <- can_data$NUMBER.DRAWN.1,
two <- can_data$NUMBER.DRAWN.2,
three <- can_data$NUMBER.DRAWN.3,
four <- can_data$NUMBER.DRAWN.4,
five <- can_data$NUMBER.DRAWN.5,
six <- can_data$NUMBER.DRAWN.6
),
.f <- function(one,two,three,four,five,six) { c(one,two,three,four,five,six)}
)
View(historical_lots)
library(knitr)
library(pander)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(sets)
install.packages("sets")
library(knitr)
library(pander)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(sets)
library(DT)
library(stringr)
library(ggplot2)
options(stringsAsFactors = FALSE)
check_historical_occurence <- function(lot) {
historical_matches <- map(historical_lots, function(x) {setequal(x,lot)})
num_past_matches <- sum(unlist(historical_matches))
s <- paste("The combination you entered has appeared ", num_past_matches, " times in the past. ", "Your chance of winning the big prize in the next drawing using this combination is ", one_ticket_probability(lot), sep = "")
return(s)
}
check_historical_occurrences(c(3, 12, 11, 14, 41, 43))
check_historical_occurrence(c(3, 12, 11, 14, 41, 43))
check_historical_occurrence <- function(lot) {
historical_matches <- map(historical_lots, function(x) {setequal(x,lot)})
num_past_matches <- sum(unlist(historical_matches))
s <- paste("The combination you entered has appeared ", num_past_matches, " times in the past. ", "Your chance of winning the big prize in the next drawing using this combination is ", one_ticket_probability(lot), sep = "")
return(s)
}
check_historical_occurrence(c(3, 12, 11, 14, 41, 43))
multi_ticket_probability <- function(n) {
total <- combination(49,6)
probability <- n/total
actual_prob <- sprintf("%1.9f",probability)
statement <- paste("After buying ", n, " tickets, you have a ", actual_prob, "% chance of winning the big prize.", sep = "" )
return(statement)
}
multi_ticket_probability(1)
multi_ticket_probability(10)
multi_ticket_probability(100)
multi_ticket_probability(10000)
multi_ticket_probability(6991908)
multi_ticket_probability(13983816)
probability_less_6 <- function(n) {
n_combinations_ticket = combination(6,n)
n_combinations_remaining = combination(49-n, 6-n)
successful_outcomes = n_combinations_ticket*n_combinations_remaining
n_combinations_total = combinations(49,6)
prob = (successful_outcomes/n_combinations_total)*100
actual_prob <- sprintf("%1.9f",probability)
statement <- paste("You have a ", actual_prob, "% chance of winning a smaller prize with ", n, " winning numbers." sep = "" )
probability_less_6 <- function(n) {
n_combinations_ticket = combination(6,n)
n_combinations_remaining = combination(49-n, 6-n)
successful_outcomes = n_combinations_ticket*n_combinations_remaining
n_combinations_total = combinations(49,6)
prob = (successful_outcomes/n_combinations_total)*100
actual_prob <- sprintf("%1.9f",probability)
statement <- paste("You have a ", actual_prob, "% chance of winning a smaller prize with ", n, " winning numbers.", sep = "" )
return(statement)
}
probability_less_6(3)
probability_less_6 <- function(n) {
n_combinations_ticket = combination(6,n)
n_combinations_remaining = combination(49-n, 6-n)
successful_outcomes = n_combinations_ticket*n_combinations_remaining
n_combinations_total = combination(49,6)
prob = (successful_outcomes/n_combinations_total)*100
actual_prob <- sprintf("%1.9f",probability)
statement <- paste("You have a ", actual_prob, "% chance of winning a smaller prize with ", n, " winning numbers.", sep = "" )
return(statement)
}
probability_less_6(3)
probability_less_6 <- function(n) {
n_combinations_ticket = combination(6,n)
n_combinations_remaining = combination(49-n, 6-n)
successful_outcomes = n_combinations_ticket*n_combinations_remaining
n_combinations_total = combination(49,6)
prob = (successful_outcomes/n_combinations_total)*100
actual_prob <- sprintf("%1.9f",prob)
statement <- paste("You have a ", actual_prob, "% chance of winning a smaller prize with ", n, " winning numbers.", sep = "" )
return(statement)
}
probability_less_6(3)
probability_less_6(4)
probability_less_6(5)
install.packages("httr")
knitr::opts_chunk$set(warning = F, results = 'markup', message = F)
# knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library(knitr)
library(pander)
library(flextable)
library(magrittr)
library(dplyr)
library(purrr)
library(readr)
library(tidyverse)
library(tidyr)
library(tibble)
library(rlang)
library(sets)
library(DT)
library(stringr)
library(ggplot2)
options(stringsAsFactors = FALSE)
setwd("~/GitHub/Animal Crossing")
trade <- data.frame(read.csv("trade_jan_18_2021.csv"))
View(trade)
View(trade)
trade <- data.frame(read.csv("trade_jan_18_2021.csv"))
names(trade)[2] <- "username"
View(trade)
trade <- data.frame(read.csv("trade_jan_18_2021.csv"))
#rename columns
names(trade)[2] <- "username"
names(trade)[4] <- "villager.traded.away"
names(trade)[5] <- "NMT"
names(trade)[6] <- "bells"
names(trade)[7] <- "villager.received"
names(trade)[8] <- "items.services.received"
top_10 <- trade %>%
group_by(villager.traded.away) %>%
summarize(total=n(villager.traded.away))
top_10 <- trade %>%
group_by(villager.traded.away) %>%
summarize(Freq = n())
View(top_10)
top_10 <- trade %>%
group_by(villager.traded.away) %>%
summarize(Freq = n()) %>%
arrange(desc(Freq))
View(top_10)
top_10 <- trade %>%
group_by(villager.traded.away) %>%
summarize(Freq = n()) %>%
arrange(desc(Freq)) %>%
filter(villager.traded.away != "NONE")
View(top_10)
?summarize
#most traded villagers, stats
top_10 <- trade %>%
group_by(villager.traded.away) %>%
summarize(Freq = n(), Average_NMT = mean(NMT), Average_bells = mean(bells)) %>%
arrange(desc(Freq)) %>%
filter(villager.traded.away != "NONE")
#most traded villagers, stats
top_10 <- trade %>%
group_by(villager.traded.away) %>%
summarize(Freq = n(), Average_NMT = mean(NMT), Average_bells = mean(bells)) %>%
arrange(desc(Freq)) %>%
filter(villager.traded.away != "NONE")
# data clean
as.numeric(trade$bells)
# data clean
as.numeric(trade$bells)
as.numeric(trade$NMT)
#most traded villagers, stats
top_10 <- trade %>%
group_by(villager.traded.away) %>%
summarize(Freq = n(), Average_NMT = mean(NMT), Average_bells = mean(bells)) %>%
arrange(desc(Freq)) %>%
filter(villager.traded.away != "NONE")
View(top_10)
?rep
typeof(trade$bells)
typeof(trade$NMT)
# data clean
as.double(trade$NMT)
as.double(trade$bells)
#most traded villagers, stats
top_10 <- trade %>%
group_by(villager.traded.away) %>%
summarize(Freq = n(), Average_NMT = mean(NMT), Average_bells = mean(bells)) %>%
arrange(desc(Freq)) %>%
filter(villager.traded.away != "NONE")
View(top_10)
